// <auto-generated />
using System;
using IMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251028065137_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMS.Models.AttachmentsModel", b =>
                {
                    b.Property<int>("attachments_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("attachments_id"));

                    b.Property<string>("file_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("incident_id")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("uploaded_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("attachments_id");

                    b.HasIndex("incident_id");

                    b.HasIndex("user_id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("IMS.Models.CategoriesModel", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("department_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_id");

                    b.HasIndex("department_id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            category_id = 11,
                            category_name = "Network Issues",
                            department_id = 12,
                            description = "Problems related to connectivity, slow internet, or outages.",
                            token = "y9OZPbXXJSbnO3rdh3F6gsb2dzHxtrhV7rQhbDv1XI0="
                        },
                        new
                        {
                            category_id = 12,
                            category_name = "Software Bugs",
                            department_id = 12,
                            description = "Errors, crashes, or failures in company software.",
                            token = "mtgoEtuRj5REx26u0DNqVsxFHWJu9bKlrlbwggkVyBY="
                        },
                        new
                        {
                            category_id = 13,
                            category_name = "Hardware Failures",
                            department_id = 12,
                            description = "Malfunctions in computers, printers, or servers.",
                            token = "QXeqHRMrRNVDF0yeEbD9S6USghh/o/lC7zZxDjfPFro="
                        },
                        new
                        {
                            category_id = 14,
                            category_name = "Cybersecurity Threats",
                            department_id = 12,
                            description = "Phishing attacks, malware, or unauthorized access.",
                            token = "EJuQxkEAHY6T0HYQsX3VPgwS4c8s/rvnrRPsu8nRRW4="
                        },
                        new
                        {
                            category_id = 15,
                            category_name = "Workplace Harassment",
                            department_id = 13,
                            description = "Reports of discrimination, bullying, or misconduct",
                            token = "dc4groq/aaMlmRUx9df/8I6aZUuuGzXsWORVWB8iHsM="
                        },
                        new
                        {
                            category_id = 16,
                            category_name = "Payroll Issues",
                            department_id = 13,
                            description = "Salary discrepancies, tax concerns, or missing payments",
                            token = "MIclgIu/YLVP+tzB51rAfKHwGHCWkOvt+Px/LHUfS7c="
                        },
                        new
                        {
                            category_id = 17,
                            category_name = "Attendance & Leave",
                            department_id = 13,
                            description = "Problems with leave applications, tardiness tracking, or shift scheduling",
                            token = "NMjqjhP7u+1PywbJw3/wwWfguXP+bcSP3eUZzsV3xJw="
                        },
                        new
                        {
                            category_id = 18,
                            category_name = "Employee Benefits",
                            department_id = 13,
                            description = "Issues related to healthcare, insurance, or retirement plans.",
                            token = "ibEe5hUL5PZGMXcUJflXDcVI3PfPKLJGEuIgEtxYSX8="
                        },
                        new
                        {
                            category_id = 19,
                            category_name = "Building Maintenance",
                            department_id = 14,
                            description = "Repairs for broken equipment, lighting, or air conditioning.",
                            token = "yeYHizT9QjRo9RGoY5HzYzInthphnSVppTstTIKVdd4="
                        },
                        new
                        {
                            category_id = 20,
                            category_name = "Safety Hazards",
                            department_id = 14,
                            description = "Fire hazards, exposed wiring, or structural issues",
                            token = "gK34Sfu/ziM6oyMbdOgIXgvRySa9lHqNusOmEUohCVs="
                        },
                        new
                        {
                            category_id = 21,
                            category_name = "Janitorial Services",
                            department_id = 14,
                            description = "Complaints regarding cleanliness or waste disposal.",
                            token = "eFXqvuloVhXkT+Zq/aU1jaw/cfP1PqMtD4gUCM+hLpI="
                        },
                        new
                        {
                            category_id = 22,
                            category_name = "Security Concerns",
                            department_id = 14,
                            description = "Issues with access control, surveillance, or unauthorized entry.",
                            token = "rvccCYQUAkBw7mJAnwyncMzk6QlDsaM+Y8S/linexjU="
                        },
                        new
                        {
                            category_id = 23,
                            category_name = "Product Defects",
                            department_id = 15,
                            description = "Issues with faulty or malfunctioning products",
                            token = "hy6uZg8nR1nmym+b2UBrBOJiYCE6wzVmH2+SaPHUhD4="
                        },
                        new
                        {
                            category_id = 24,
                            category_name = "Billing Disputes",
                            department_id = 15,
                            description = "Overcharges, incorrect invoices, or refunds.",
                            token = "l+fXeUVOHJLJMdDyFgbCvBw7Xo+AH8z+T6jHEbyncCI="
                        },
                        new
                        {
                            category_id = 25,
                            category_name = "Service Complaints",
                            department_id = 15,
                            description = "Delayed deliveries, poor service, or unresponsive support.",
                            token = "NDxdk+RMKCooSgYQnRbs7eR54lNvdIxBn0tPpb1jVlA="
                        },
                        new
                        {
                            category_id = 26,
                            category_name = "Account Issues",
                            department_id = 15,
                            description = "Problems with login, password resets, or account suspension",
                            token = "XndG/Zx19NQ+95a1Kz5ix5Hmo68zFiR8oPcPJk1eFp4="
                        },
                        new
                        {
                            category_id = 27,
                            category_name = "Workplace Injuries",
                            department_id = 16,
                            description = "Reporting accidents, injuries, or hazardous conditions",
                            token = "dbjQ/wTKDNor9ZCFZl38BZrGscycG7vWYspk1i1IkpM="
                        },
                        new
                        {
                            category_id = 28,
                            category_name = "Health Code Violations",
                            department_id = 16,
                            description = "Unsanitary conditions, food safety, or medical concerns.",
                            token = "3qQfElbe1OmAe3g2YxdrvYRHNRpHbqlXnANpenEmkV8="
                        },
                        new
                        {
                            category_id = 29,
                            category_name = "Fire Safety Issues",
                            department_id = 16,
                            description = "Fire alarm malfunctions, blocked exits, or fire drill concerns.",
                            token = "Y6gxXphSXY/BwSBUgULKKnHY1nQN4ioEyRJq9tR1cQM="
                        },
                        new
                        {
                            category_id = 30,
                            category_name = "Ergonomic Concerns",
                            department_id = 16,
                            description = "Poor workstation setup causing discomfort or injury",
                            token = "ppDJseg+d8dPcOrHewCLpayXF91upPU0UlOvpT+V43o="
                        });
                });

            modelBuilder.Entity("IMS.Models.CommentsModel", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<string>("comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("commented_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("incident_id")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("comment_id");

                    b.HasIndex("incident_id");

                    b.HasIndex("user_id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("IMS.Models.DepartmentsModel", b =>
                {
                    b.Property<int>("department_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("department_id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("department_id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            department_id = 12,
                            ImagePath = "/departments/IT.webp",
                            department = "Information Technology (IT) Department",
                            description = "Responsible for maintaining and securing the organization's IT infrastructure, ensuring smooth operation of systems, networks, and software.",
                            token = "EYcLYD+5MDZefgLOMIoszTVmLL6YuHDc/r7gSnhjOMI="
                        },
                        new
                        {
                            department_id = 13,
                            ImagePath = "/departments/hr.webp",
                            department = "Human Resources (HR) Department",
                            description = "Handles employee-related issues, including recruitment, workplace policies, and conflict resolution.",
                            token = "1L9JFDAOhdRAfr8WTE2TFseSIbmFznhF8G+YQYeQztU="
                        },
                        new
                        {
                            department_id = 14,
                            ImagePath = "/departments/facilities.webp",
                            department = "Facilities Management Department",
                            description = "Ensures the maintenance and safety of physical office spaces, including repairs and environmental concerns.",
                            token = "6G7QdUkik1mqrvrGW7onUkJgMDX0uWCx8eO5CGPAafI="
                        },
                        new
                        {
                            department_id = 15,
                            ImagePath = "/departments/customer.webp",
                            department = "Customer Support Department",
                            description = "Addresses customer complaints, inquiries, and service-related issues to maintain customer satisfaction.",
                            token = "WKGIl7ur+NipjdwcCelAQMAWgwI4+yUKRAUJ+rwnUrI="
                        },
                        new
                        {
                            department_id = 16,
                            ImagePath = "/departments/health and safety.webp",
                            department = "Health and Safety Department",
                            description = "Ensures workplace safety, compliance with health regulations, and handles medical emergencies.",
                            token = "CfNwST/Pp0U9H/1bbkTQOQ308K05oiLvpcTGdLosZNA="
                        });
                });

            modelBuilder.Entity("IMS.Models.IncidentsModel", b =>
                {
                    b.Property<int>("incident_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("incident_id"));

                    b.Property<int?>("assigned_too")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("department_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("reported_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("incident_id");

                    b.HasIndex("department_id");

                    b.HasIndex("user_id");

                    b.ToTable("incidents");

                    b.HasData(
                        new
                        {
                            incident_id = 12,
                            category = "Network Issues",
                            department_id = 12,
                            description = "The entire office lost internet connectivity around 10:30 AM. All employees are unable to access internal systems, emails, and cloud-based services. Restarting the router did not resolve the issue.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 14, 6, 2, 22, 0, DateTimeKind.Unspecified),
                            status = "Pending",
                            tittle = "Network Outage in Main Office",
                            token = "Qd/aT69LhRylvJFVd+GsPfEcSNgmKR1z+xX+0Z4zB/Y=",
                            user_id = 3
                        },
                        new
                        {
                            incident_id = 13,
                            category = "Payroll Issues",
                            department_id = 13,
                            description = "HR employees are unable to log in to the payroll system. Error message: 'Invalid Credentials' even though the credentials are correct.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 14, 6, 4, 55, 0, DateTimeKind.Unspecified),
                            status = "Pending",
                            tittle = "Payroll System Login Failure",
                            token = "UptZquhuvLGhM01qb1cmd9V9oPQKl0cuAx6GXsYH9RE=",
                            user_id = 6
                        },
                        new
                        {
                            incident_id = 14,
                            category = "Building Maintenance",
                            department_id = 14,
                            description = "Elevator in Building B is stuck on the 3rd floor. Employees are unable to use it, and the control panel is unresponsive.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 14, 6, 6, 41, 0, DateTimeKind.Unspecified),
                            status = "Pending",
                            tittle = "Elevator Malfunction in Building B",
                            token = "Q/8L3vjijELj2ApZvZ/RtlpzPNIsD/86Hq8D0vc7bHs=",
                            user_id = 7
                        },
                        new
                        {
                            incident_id = 15,
                            category = "Account Issues",
                            department_id = 15,
                            description = "The customer complaint tracking system crashes after submitting a complaint. This is affecting response times.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 14, 6, 8, 45, 0, DateTimeKind.Unspecified),
                            status = "Pending",
                            tittle = "Customer Complaint System Not Responding",
                            token = "5Zb+X3izbPijUY8celgVJ40PefnDxz75PSUdh6AcVbU=",
                            user_id = 8
                        },
                        new
                        {
                            incident_id = 16,
                            category = "Ergonomic Concerns",
                            department_id = 16,
                            description = "Some financial records for February 2025 are missing in the accounting system. The reports do not load correctly.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 14, 6, 9, 58, 0, DateTimeKind.Unspecified),
                            status = "Pending",
                            tittle = "Missing Financial Reports in System",
                            token = "kHmRUB+JBdxmh0JVdEdynvQs7Sl/SupcCYCE/PYC+Tw=",
                            user_id = 9
                        },
                        new
                        {
                            incident_id = 17,
                            assigned_too = 4,
                            category = "Hardware Failures",
                            department_id = 12,
                            description = "The server suddenly shutdown and can't be opened.",
                            priority = "High",
                            reported_at = new DateTime(2025, 3, 15, 10, 27, 52, 0, DateTimeKind.Unspecified),
                            status = "In Progress",
                            tittle = "System Downtime",
                            token = "d5nLpbAe8s6k5RZY/UxjrdMHyYDbQp2eaq7zgQsl6ck=",
                            user_id = 3
                        });
                });

            modelBuilder.Entity("IMS.Models.LogsModel", b =>
                {
                    b.Property<int>("log_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("log_id"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("log_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("log_id");

                    b.HasIndex("user_id");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("IMS.Models.NotificationsModel", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("notification_id");

                    b.HasIndex("user_id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("IMS.Models.UpdatesModel", b =>
                {
                    b.Property<int>("update_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("update_id"));

                    b.Property<string>("attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("incident_id")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("update_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("update_id");

                    b.HasIndex("incident_id");

                    b.HasIndex("user_id");

                    b.ToTable("updates");
                });

            modelBuilder.Entity("IMS.Models.UsersModel", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRistrict")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token_forgot")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            created_at = new DateTime(2025, 3, 13, 2, 15, 7, 0, DateTimeKind.Unspecified),
                            department = "NONE",
                            email = "admin@gmail.com",
                            full_name = "Admin",
                            isRistrict = false,
                            password = "$2a$11$A.0BKl3ASTqoRr8dLlWoPesgiVtaDMYEklsW.FqVYeaGEPKc.Djwi",
                            profile = "/uploads/db682a3e-8bd0-48de-986a-b89a678549ba_admin.jpg",
                            role = "admin",
                            token = "b4DmKmCKT3AwPc+6bLF60/wFgDmXGnfn8We9F31R8EA="
                        },
                        new
                        {
                            user_id = 3,
                            created_at = new DateTime(2025, 3, 13, 2, 38, 39, 0, DateTimeKind.Unspecified),
                            department = "IT",
                            email = "escalerajandel@gmail.com",
                            full_name = "Jandel L. Escalera",
                            isRistrict = false,
                            password = "$2a$11$Vn.lT8jQb5V/SotnvF/JGe4xSaGq2x6KFQP40rdkNxqee3YE4gERK",
                            role = "user",
                            token = "MSK56cHgAJi9kXNzg2PRB0sLzVtP9Z4ywk4lPHWUHLw="
                        },
                        new
                        {
                            user_id = 4,
                            created_at = new DateTime(2025, 3, 14, 3, 12, 45, 0, DateTimeKind.Unspecified),
                            department = "Information Technology (IT) Department",
                            email = "moderator@gmail.com",
                            full_name = "Moderator",
                            isRistrict = false,
                            password = "$2a$11$5p8lht/am/uAg96zUZpH4.ppxLkjcDstGjs5As/iNeuOTrVKMw/xa",
                            role = "moderator",
                            token = "HpI5vTPrFIYF9o0SYZ2lL3/3fWjJqJQQf+OF5G1JBqE="
                        },
                        new
                        {
                            user_id = 5,
                            created_at = new DateTime(2025, 3, 14, 5, 19, 22, 0, DateTimeKind.Unspecified),
                            department = "Security Operations (SecOps)",
                            email = "moderator2@gmail.com",
                            full_name = "Moderator2",
                            isRistrict = false,
                            password = "$2a$11$OPYGmhz7SBSyDcF/og2dZ.pZIYHYJFKMowMKo0yId24MOx1doeVNa",
                            role = "moderator",
                            token = "fh3mxIB++x2xSNY8h52gX0cGNImmEZc4EDRx9Nzq+js="
                        },
                        new
                        {
                            user_id = 6,
                            created_at = new DateTime(2025, 3, 14, 6, 3, 46, 0, DateTimeKind.Unspecified),
                            department = "NONE",
                            email = "maria.santos@example.com",
                            full_name = "Maria Santos",
                            isRistrict = false,
                            password = "$2a$11$/8EmvCVReBigVd5dTjbQmeatoWgapeEkclKXvY9G1FJ4xMi3IV442",
                            role = "user",
                            token = "ebISNl+Q/RQUtwr4BL8JVWpaFMpW8HocmMXf2viJA+A="
                        },
                        new
                        {
                            user_id = 7,
                            created_at = new DateTime(2025, 3, 14, 6, 5, 21, 0, DateTimeKind.Unspecified),
                            department = "NONE",
                            email = "james.rodriguez@example.com",
                            full_name = "James Rodriguez",
                            isRistrict = false,
                            password = "$2a$11$7dmhE9tPbZWCsP3EmdlwPOfGZ3Lgas.S/P0A3Gbb8IF/LqwQfqiQO",
                            role = "user",
                            token = "38rpDGoPp9nOZcCkeul3zmUy+qxEbW5sHwqvDb3x6fg="
                        },
                        new
                        {
                            user_id = 8,
                            created_at = new DateTime(2025, 3, 14, 6, 7, 19, 0, DateTimeKind.Unspecified),
                            department = "NONE",
                            email = "angela.lopez@example.com",
                            full_name = "Angela Lopez",
                            isRistrict = false,
                            password = "$2a$11$FRYxXUpMCqCvsLPrFd8rGOmNgLMjrHwbXbmoughA4W2vgiOHDNEhO",
                            role = "user",
                            token = "LvDhX4JQEvXfy7GwA0sBt8XDvg3GMIiZpomxNcPkw2Y="
                        },
                        new
                        {
                            user_id = 9,
                            created_at = new DateTime(2025, 3, 14, 6, 9, 12, 0, DateTimeKind.Unspecified),
                            department = "NONE",
                            email = "mark.villanueva@example.com",
                            full_name = "Mark Villanueva",
                            isRistrict = false,
                            password = "$2a$11$kcWTJg9vJlxTwfEaroqEReRpzSFioLPjlsVhfDnro1AvRe.U5XEPC",
                            role = "user",
                            token = "oQRPEsk16kyTQDIBiLmfDkG63sWdsq/ckVlxHKNSk6o="
                        });
                });

            modelBuilder.Entity("IMS.Models.AttachmentsModel", b =>
                {
                    b.HasOne("IMS.Models.IncidentsModel", "Incident")
                        .WithMany()
                        .HasForeignKey("incident_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany("Attachments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.CategoriesModel", b =>
                {
                    b.HasOne("IMS.Models.DepartmentsModel", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("IMS.Models.CommentsModel", b =>
                {
                    b.HasOne("IMS.Models.IncidentsModel", "Incident")
                        .WithMany()
                        .HasForeignKey("incident_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.IncidentsModel", b =>
                {
                    b.HasOne("IMS.Models.DepartmentsModel", "Department")
                        .WithMany("Incidents")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany("Incidents")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.LogsModel", b =>
                {
                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.NotificationsModel", b =>
                {
                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.UpdatesModel", b =>
                {
                    b.HasOne("IMS.Models.IncidentsModel", "Incident")
                        .WithMany("Updates")
                        .HasForeignKey("incident_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.UsersModel", "User")
                        .WithMany("Updates")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMS.Models.DepartmentsModel", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("IMS.Models.IncidentsModel", b =>
                {
                    b.Navigation("Updates");
                });

            modelBuilder.Entity("IMS.Models.UsersModel", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Incidents");

                    b.Navigation("Notifications");

                    b.Navigation("Updates");
                });
#pragma warning restore 612, 618
        }
    }
}
